import tempfile
import yaml
import bcrypt
from pymongo.collection import Collection

def create_temp_config_from_mongo(collection_users: Collection) -> str:
    """
    Cria um arquivo de configura√ß√£o tempor√°rio a partir dos dados de usu√°rios armazenados no MongoDB.
    
    Par√¢metros:
        collection_users (Collection): Conex√£o com a cole√ß√£o de usu√°rios no MongoDB.

    Retorna:
        str: Caminho do arquivo de configura√ß√£o tempor√°rio gerado.
    """
    # Buscar todos os usu√°rios no MongoDB
    users_data = collection_users.find()

    # Criar um dicion√°rio para armazenar os dados do config tempor√°rio
    temp_config_data = {
        'credentials': {
            'usernames': {}
        }
    }

    # Adicionar usu√°rios do MongoDB ao config tempor√°rio
    for user_data in users_data:
        username = user_data.get('email', '')

        # Garantir que a senha est√° hasheada antes de armazenar (caso ainda n√£o esteja)
        password = user_data.get('senha', '')
        if not password.startswith("$2b$"):  # Se n√£o estiver hasheado, aplicar bcrypt
            password = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

        # Estrutura do usu√°rio no formato do config.yaml
        user_yaml_data = {
            'email': username,
            'failed_login_attempts': 0,
            'first_name': user_data.get('nome', ''),
            'last_name': user_data.get('sobrenome', ''),
            'logged_in': False,
            'password': password,
            'roles': [user_data.get('hierarquia', 'viewer')]
        }

        # Adicionar o usu√°rio ao config tempor√°rio
        temp_config_data['credentials']['usernames'][username] = user_yaml_data
        print(f"‚úÖ Usu√°rio {username} adicionado ao config tempor√°rio.")

    # Criar um arquivo tempor√°rio para salvar o config.yaml
    with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.yaml', encoding='utf-8') as temp_file:
        yaml.dump(temp_config_data, temp_file, default_flow_style=False)
        temp_file_path = temp_file.name

    print(f"üìÅ Arquivo config tempor√°rio criado: {temp_file_path}")
    return temp_file_path

def load_config_and_check_or_insert_cookies(config_file_path: str) -> dict:
    """
    Carrega um arquivo de configura√ß√£o YAML e garante que a se√ß√£o de cookies exista.

    Par√¢metros:
        config_file_path (str): Caminho do arquivo de configura√ß√£o YAML.

    Retorna:
        dict: Configura√ß√£o carregada e corrigida.
    """
    # Carregar o arquivo YAML existente
    try:
        with open(config_file_path, 'r', encoding='utf-8') as file:
            config_data = yaml.safe_load(file) or {}  # Garante que n√£o seja None
    except FileNotFoundError:
        config_data = {}  # Se o arquivo n√£o existir ainda

    # Garantir que a se√ß√£o 'cookie' exista
    if 'cookie' not in config_data:
        config_data['cookie'] = {
            'expiry_days': 7,  # Definir um valor padr√£o de expira√ß√£o
            'key': 'some_signature_key',
            'name': 'user_session_cookie'
        }
        print("‚ö†Ô∏è Se√ß√£o 'cookie' criada com valores padr√£o.")

    # Garantir que a chave 'name' exista na se√ß√£o 'cookie'
    if 'name' not in config_data['cookie']:
        config_data['cookie']['name'] = 'user_session_cookie'
        print("‚ö†Ô∏è Chave 'name' na se√ß√£o 'cookie' criada com valor padr√£o.")

    # Salvar o arquivo atualizado
    with open(config_file_path, 'w', encoding='utf-8') as file:
        yaml.dump(config_data, file, default_flow_style=False)

    print("‚úÖ Configura√ß√£o carregada e corrigida.")
    return config_data
